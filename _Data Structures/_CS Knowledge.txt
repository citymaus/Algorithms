To be pedantic, there are 7 different valid -O options you can give to gcc, though there are some that mean the same thing. From the man page

-O (Same as -O1)
-O0 (do no optimization, the default if no optimization level is specified)
-O1 (optimize minimally)
-O2 (optimize more)
-O3 (optimize even more)
-Ofast (optimize very aggressively to the point of breaking standard compliance)
-Os (Optimize for size. -Os enables all -O2 optimizations that do not typically increase code size. 
    It also performs further optimizations designed to reduce code size. 
   -Os disables the following optimization flags: -falign-functions -falign-jumps 
   -falign-loops -falign-labels -freorder-blocks -freorder-blocks-and-partition 
   -fprefetch-loop-arrays -ftree-vect-loop-version)

Differences between C++ and Java
--------------------------------
There are a number of C++ features that Java does not support. Perhaps the single 
biggest difference between Java and C++ is that Java does not support pointers. 
(Dont't we all already know that!)  In C++, pointer is one of C++ most important 
language features.  It is also one of the most dangerous if used improperly.  
Pointers don't exist in Java for two reasons. First, pointers are inherently insecure.  
For example, using a C++ pointer, it is possible to gain access to memory addresses 
outside a program's code and data. Second, the designer of Java probably think that 
they were too troublesome.  Since pointers don't exist in Java, neither does the -> 
operator. 

Java does not include structures or unions.  These were felt to be redundant since 
the class encapsulates them.

Java does not support operator overloading as does C++.

C++ includes a preprocessor or support the preprocessor directives
but Java does not.

C++ does perform automatic type conversions that result in a loss of precision.  
Java does not.  
   For example, a conversion from long integer to integer must be explicitly cast.


C++ and Java Differences:
--------------------------
C++ allows default arguments.  This means that you may specify a value that a parameter 
will have when there is no argument corresponding  to that parameter when the function 
is invoked.  Java does not allow default argument.

C++ supports inheritance of multiple superclasses by a subclass which Java does not.

To derive a class, the keyword "extends" is used in Java as ":" is used in C++.

The keyword "super" can be used to access the super class in Java.  
In C++, super is replaced with ::.  Also, in Smalltalk the keyword "self" is
"this" in Java and C++.

Although Java supports constructors, it does not have destructors.  It does, however, 
add the finalize() function which can be used to reclaim resources other than memory 
such as a file or a handle to another object.  Therefore, Java does not have the 
delete operator.

In C++ and Java all variables are typed, but in Smalltalk all variables are typeless
and can point to any object or class.

Polymorphism can be turned on or off in C++ by a keyword virtual.  In Java, polymorphism
is always on by default.  If one does not want it, the keyword "final" can be used.  

You can still write a procedural program using C++, but not in Java.

In C++ and Java the programmer can specify the access attributes for the variables 
and methods.  

C and C++ Security Issues:
--------------------------
One of the biggest security problems with C and C++ programs is buffer overflow. 
C has the additional weakness of not supporting exceptions, which makes it easy to write programs that ignore critical error situations.

Another problem with C and C++ is that developers have to do their own memory management (e.g., using malloc(), alloc(), free(), new, and delete), 
and failing to do it correctly may result in a security flaw. The more serious problem is that programs may erroneously free memory that should not be freed 
(e.g., because it's already been freed). This can result in an immediate crash or be exploitable, allowing an attacker to cause arbitrary code to be executed. 


Some Best Coding Practices:
---------------------------
- Naming conventions (m_dog for member variable)
- Returning only once from functions to reduce memory leaks
- Proper mem deallocation and object destruction
- Code reviews (what I think is pretty should be reviewed)

SCRUM / Agile: 
--------------
https://www.versionone.com/agile-101/what-is-scrum/

//------------------
// Scrum team: //
<!--The Product Owner-->
The Product Owner is the project’s key stakeholder – usually an internal or external customer, or a spokesperson for the customer. 
There is only one Product Owner who conveys the overall mission and vision of the product which the team is building. The Product 
Owner is ultimately accountable for managing the product backlog and accepting completed increments of work.

<!--The ScrumMaster-->
The ScrumMaster is the servant leader to the Product Owner, Development Team and Organization. With no hierarchial authority 
over the team but rather more of a facilitator, the ScrumMaster ensures that the team adheres to Scrum theory, practices, and 
rules. The ScrumMaster protects the team by doing anything possible to help the team perform at the highest level. This may 
include removing impediments, facilitating meetings, and helping the Product Owner groom the backlog.

<!--The Development Team--> 
The Development Team is a self-organizing, cross-functional group armed with all of the skills to deliver shippable increments 
at the completion of each sprint. Scrum broadens the definition of the term “developer” beyond programmers to include anyone 
who participates in the creation of the delivered increment. There are no titles in the Development Team and no one, including 
the ScrumMaster, tells the Development Team how to turn product backlog items into potentially shippable increments

//------------------
// Scrum Events //
<!--The Sprint --> 
A sprint is a time-boxed period during which specific work is completed and made ready for review. Sprints are usually 
2-4 weeks long but can be as short as one week.

<!--Sprint Planning--> 
Sprint Planning team meetings are time-boxed events that determine which product backlog items will be delivered and 
how the work will be achieved.

<!--The Daily Stand-up--> 
The Daily Stand-up is a short communication meeting (no more than 15 minutes) in which each team member quickly and 
transparently covers progress since the last stand-up, planned work before the next meeting, and any impediments that 
may be blocking his or her progress.

<!--The Sprint Review--> 
The Sprint Review is the “show-and-tell” or demonstration event for the team to present the work completed during 
the sprint. The Product Owner checks the work against pre-defined acceptance criteria and either accepts or rejects 
the work. The stakeholders or clients give feedback to ensure that the delivered increment met the business need.

<!--The Retrospective--> 
The Retrospective, or Retro, is the final team meeting in the Sprint to determine what went well, what didn’t go 
well, and how the team can improve in the next Sprint. Attended by the team and the ScrumMaster, the Retrospective is an 
important opportunity for the team to focus on its overall performance and identify strategies for continuous 
improvement on its processes.

//------------------
// Scrum Artifacts //
<!--Product Backlog --> 
The product backlog is the single most important document that outlines every requirement for a system, project or 
product. The product backlog can be thought of as a to-do list consisting of work items, each of which produces a 
deliverable with business value. Backlog items are ordered in terms of business value by the Product Owner.

<!--Sprint Backlog --> 
A sprint backlog is the specific list of items taken from the product backlog which are to be completed in a sprint.

<!--Increment --> 
An Increment is the sum of all product backlog items that have been completed since the last software release. 
While it is up to the Product Owner to decide on when an increment is released, it is the team’s responsibility to 
make sure everything that is included in an increment is ready to be released. This is also referred to as the 
Potentially Shippable Increment (PSI).
https://www.versionone.com/agile-101/agile-development-quiz/

Designing for Scalability:
--------------------------
1. how much additional traffic can it handle, 
2. how easy is it to add more storage capacity, 
3. or even how many more transactions can be processed.

http://highscalability.squarespace.com/blog/category/strategy
- Load balancing (distributing jobs over multiple workers)
- Data compression (for storing large datasets)
- Affinity (same clients connect to same servers to make use of caches)
- SaaS (software as a service--CONCUR)
http://highscalability.squarespace.com/blog/2015/11/16/9ish-low-latency-strategies-for-saas-companies.html
- Low latency:
	Achieving very low latencies takes special engineering, but if you are a SaaS company 
	latencies of a few hundred milliseconds are possible for complex business logic using 
	standard technologies like load balancers, queues, JVMs, and rest APIs.
- Most problem are quite straightforward to solve: 
	when something is slow, you can either optimize it or parallelize it. 

Common scalable design patterns:
1. Load Balancer - a dispatcher determines which worker instance will handle a request based on different policies.
2. Scatter and Gather - a dispatcher multicasts requests to all workers in a pool. Each worker will compute a local result and send it back to the dispatcher, who will consolidate them into a single response and then send back to the client.
3. Result Cache - a dispatcher will first lookup if the request has been made before and try to find the previous result to return, in order to save the actual execution.
4. Shared Space - all workers monitors information from the shared space and contributes partial knowledge back to the blackboard. The information is continuously enriched until a solution is reached.
5. Pipe and Filter - all workers connected by pipes across which data flows.
6. MapReduce -  targets batch jobs where disk I/O is the major bottleneck. It use a distributed file system so that disk I/O can be done in parallel.
7. Bulk Synchronous Parallel - a  lock-step execution across all workers, coordinated by a master.
8. Execution Orchestrator - an intelligent scheduler / orchestrator schedules ready-to-run tasks (based on a dependency graph) across a clusters of dumb workers.

STACK VS. HEAP
---------------------------
http://gribblelab.org/CBootcamp/7_Memory_Stack_vs_Heap.html
Stack:
very fast access
don't have to explicitly de-allocate variables
space is managed efficiently by CPU, memory will not become fragmented
local variables only
limit on stack size (OS-dependent)
variables cannot be resized

Heap:
variables can be accessed globally
no limit on memory size
(relatively) slower access
no guaranteed efficient use of space, memory may become fragmented over time as blocks of memory are allocated, then freed
you must manage memory (you're in charge of allocating and freeing variables)
variables can be resized using realloc()