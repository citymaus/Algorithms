To be pedantic, there are 7 different valid -O options you can give to gcc, though there are some that mean the same thing. From the man page

-O (Same as -O1)
-O0 (do no optimization, the default if no optimization level is specified)
-O1 (optimize minimally)
-O2 (optimize more)
-O3 (optimize even more)
-Ofast (optimize very aggressively to the point of breaking standard compliance)
-Os (Optimize for size. -Os enables all -O2 optimizations that do not typically increase code size. 
    It also performs further optimizations designed to reduce code size. 
   -Os disables the following optimization flags: -falign-functions -falign-jumps 
   -falign-loops -falign-labels -freorder-blocks -freorder-blocks-and-partition 
   -fprefetch-loop-arrays -ftree-vect-loop-version)

Differences between C++ and Java
--------------------------------
There are a number of C++ features that Java does not support. Perhaps the single 
biggest difference between Java and C++ is that Java does not support pointers. 
(Haven't we all already know that!)  In C++, pointer is one of C++ most important 
language features.  It is also one of the most dangerous if used improperly.  
Pointers don't exist in Java for two reasons. First, pointers are inherently insecure.  
For example, using a C++ pointer, it is possible to gain access to memory addresses 
outside a program's code and data. Second, the designer of Java probably think that 
they were too troublesome.  Since pointers don't exist in Java, neither does the -> 
operator. 

Java does not include structures or unions.  These were felt to be redundant since 
the class encapsulates them.

Java does not support operator overloading as does C++.

C++ includes a preprocessor or support the preprocessor directives
but Java does not.

C++ does perform automatic type conversions that result in a loss of precision.  
Java does not.  
   For example, a conversion from long integer to integer must be explicitly cast.


C++ and Java Differences:
--------------------------
C++ allows default arguments.  This means that you may specify a value that a parameter 
will have when there is no argument corresponding  to that parameter when the function 
is invoked.  Java does not allow default argument.

C++ supports inheritance of multiple superclasses by a subclass which Java does not.

To derive a class, the keyword "extends" is used in Java as ":" is used in C++.

The keyword "super" can be used to access the super class in Java.  
In C++, super is being replaced with ::.  Also, in Smalltalk the keyword "self" is
"this" in Java and C++.

Although Java supports constructors, it does not have destructors.  It does, however, 
add the finalize() function which can be used to reclaim resources other than memory 
such as a file or a handle to another object.  Therefore, Java does not have the 
delete operator.

In C++ and Java all variables are typed, but in Smalltalk all variables are typeless
and can point to any object or class.

Polymorphism can be turned on or off in C++ by a keyword virtual.  In Java, polymorphism
is always on by default.  If one does not want it, the keyword "final" can be used.  

You can still write a procedural program using C++, but not in Java.

In C++ and Java the programmer can specify the access attributes for the variables 
and methods.  

C and C++ Security Issues:
--------------------------
One of the biggest security problems with C and C++ programs is buffer overflow. 
C has the additional weakness of not supporting exceptions, which makes it easy to write programs that ignore critical error situations.

Another problem with C and C++ is that developers have to do their own memory management (e.g., using malloc(), alloc(), free(), new, and delete), 
and failing to do it correctly may result in a security flaw. The more serious problem is that programs may erroneously free memory that should not be freed 
(e.g., because it's already been freed). This can result in an immediate crash or be exploitable, allowing an attacker to cause arbitrary code to be executed. 


Some Best Coding Practices:
---------------------------
- Naming conventions (m_dog for member variable)
- Returning only once from functions to reduce memory leaks
- Proper mem deallocation and object destruction
- Code reviews (what I think is pretty should be reviewed)
