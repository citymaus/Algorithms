Socket types
-------------
Several Internet socket types are available:

Datagram sockets,               also known as connectionless sockets, which use User Datagram Protocol (UDP).
Stream sockets,                 also known as connection-oriented sockets, which use Transmission Control Protocol (TCP) or Stream Control Transmission Protocol (SCTP).
Raw sockets (or Raw IP sockets), typically available in routers and other network equipment. Here the transport layer is bypassed, and the packet headers are made accessible to the application.
Other socket types are implemented over other transport protocols, such as Systems Network Architecture (SNA).[2] See also Unix domain sockets (UDS), for internal inter-process communication.


UDP
TCP


Packets
-------
Packet reassembly:
at the IP level, reassembly the fragmented packets based on the offset value.
at the TCP level, re-order the packets (reassembly) based on sequence number.


IPv4                  vs.     IPv6
----------------------------------------------------------------------
4 billion addresses         340 trillion, trillion, trillion addresses 340 with 36 0's
32 bit address              128 bit address
Design in 70's              Came out in 2012
Longer headers              Shorter headers
                            (Version, Traffic Class, Flow Label, Payload length, Next Header, Hop Limit, Source, Destination
Base 10                     Hexadecimal

- Eliminates most address conflict issues
- IPv6 encrypts traffic and checks packet integrity
- No more NAT (Network Address Translation)
- Auto-configuration
- No more private address collisions
- Better multicast routing
- Simpler header format
- Simplified, more efficient routing
- True quality of service (QoS), also called "flow labeling"
- Built-in authentication and privacy support
- Flexible options and extensions
- Easier administration (say good-bye to DHCP)

ReST Development:
-----------------
RESTful applications use HTTP requests to post data (create and/or update), read data (e.g., make queries), 
and delete data. Thus, REST uses HTTP for all four CRUD (Create/Read/Update/Delete) operations.

Issuing HTTP GET Requests (C#)
//The key classes here are HttpWebRequest and HttpWebResponse from System.Net.
//The following method issues a request and returns the entire response as one long string:

static string HttpGet(string url) {
  HttpWebRequest req = WebRequest.Create(url)
                       as HttpWebRequest;
  string result = null;
  using (HttpWebResponse resp = req.GetResponse()
                                as HttpWebResponse)
  {
    StreamReader reader =
        new StreamReader(resp.GetResponseStream());
    result = reader.ReadToEnd();
  }
  return result;
}

Issuing HTTP POST Requests (C#):
//URL encoding is also required for POST requests -- in addition to form encoding, 
//as shown in the following method:

static string HttpPost(string url, 
    string[] paramName, string[] paramVal)
{
  HttpWebRequest req = WebRequest.Create(new Uri(url)) 
                       as HttpWebRequest;
  req.Method = "POST";  
  req.ContentType = "application/x-www-form-urlencoded";

  // Build a string with all the params, properly encoded.
  // We assume that the arrays paramName and paramVal are
  // of equal length:
  StringBuilder paramz = new StringBuilder();
  for (int i = 0; i < paramName.Length; i++) {
    paramz.Append(paramName[i]);
    paramz.Append("=");
    paramz.Append(HttpUtility.UrlEncode(paramVal[i]));
    paramz.Append("&");
  }

  // Encode the parameters as form data:
  byte[] formData =
      UTF8Encoding.UTF8.GetBytes(paramz.ToString());
  req.ContentLength = formData.Length;

  // Send the request:
  using (Stream post = req.GetRequestStream())  
  {  
    post.Write(formData, 0, formData.Length);  
  }

  // Pick up the response:
  string result = null;
  using (HttpWebResponse resp = req.GetResponse()
                                as HttpWebResponse)  
  {  
    StreamReader reader = 
        new StreamReader(resp.GetResponseStream());
    result = reader.ReadToEnd();
  }

  return result;
}
